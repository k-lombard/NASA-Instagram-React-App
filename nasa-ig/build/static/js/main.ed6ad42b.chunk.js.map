{"version":3,"sources":["store/NASAIg-types.tsx","store/NASAIg-actions.tsx","components/NASAIg.tsx","store/NASAIg-reducers.tsx","store/store.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["SET_CURRENT_IMAGES","SET_LIKES","SET_LOADING","SET_COPY_IMAGES","SET_COPY_LIKES","setCurrentImages","currentImages","type","setLoading","loading","setLikes","likes","setCopyImages","copyImages","NASAIg","useState","Date","forceUpdate","setValue","value","useForceUpdate","selectedDateStart","setSelectedDateStart","selectedDateEnd","setSelectedDateEnd","dispatch","useDispatch","useSelector","state","setButtonDisplay","copyLikes","useEffect","a","fetch","then","res","Promise","resolve","json","catch","err","reject","Error","response","data","console","log","temp","Array","forEach","element","push","Button","variant","color","onClick","evt","preventDefault","PURGE","key","result","size","Fragment","utils","DateFnsUtils","disableToolbar","style","marginTop","marginLeft","marginRight","format","margin","id","label","onChange","_","newValue","KeyboardButtonProps","setCopyLikes","temp3","filter","idx","check","date","to","from","getTime","temp4","slice","concat","length","List","position","left","transform","map","img","ListItem","Card","width","height","CardContent","IconButton","handleLike","ListItemText","primary","title","secondary","src","url","initialIGState","middleware","createSagaMiddleware","rootReducer","combineReducers","action","config","storage","persisted","persistReducer","store","createStore","applyMiddleware","thunk","persistor","persistStore","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ed6ad42b.chunk.js","sourcesContent":["import { PURGE } from 'redux-persist'\nexport interface IGState {\n    currentImages: any[];\n    likes: number[];\n    loading: boolean;\n    copyImages: any[];\n    copyLikes: number[];\n}\n\nexport const SET_CURRENT_IMAGES = 'SET_CURRENT_IMAGES'\nexport const SET_LIKES = 'SET_LIKES'\nexport const SET_LOADING = 'SET_LOADING'\nexport const SET_COPY_IMAGES = 'SET_COPY_IMAGES'\nexport const SET_COPY_LIKES = 'SET_COPY_LIKES'\n\nexport interface SetCurrentImagesAction {\n    type: typeof SET_CURRENT_IMAGES;\n    currentImages: any[];\n}\n\nexport interface SetLikesAction {\n    type: typeof SET_LIKES;\n    likes: number[];\n}\n\nexport interface SetLoadingAction {\n    type: typeof SET_LOADING;\n    loading: boolean;\n}\nexport interface PurgeAction {\n    type: typeof PURGE;\n    IGState: {};\n}\n\nexport interface SetCopyImagesAction {\n    type: typeof SET_COPY_IMAGES;\n    copyImages: any[];\n}\n\nexport interface SetCopyLikesAction {\n    type: typeof SET_COPY_LIKES;\n    copyLikes: number[];\n}\n\n\n\nexport type NASAIgActionTypes = SetCurrentImagesAction | SetLikesAction | SetLoadingAction | PurgeAction | SetCopyImagesAction | SetCopyLikesAction","import { ThunkAction } from 'redux-thunk'\nimport { AnyAction } from 'redux'\nimport { SET_CURRENT_IMAGES } from './NASAIg-types'\nimport { SetCurrentImagesAction } from './NASAIg-types'\nimport { SET_LOADING} from './NASAIg-types'\nimport { SET_LIKES } from './NASAIg-types'\nimport { SetLikesAction } from './NASAIg-types'\nimport { SetLoadingAction } from './NASAIg-types'\nimport { persistStore } from 'redux-persist'\nimport store from './store'\nimport { SetCopyImagesAction } from './NASAIg-types'\nimport { SET_COPY_IMAGES } from './NASAIg-types'\nimport { SET_COPY_LIKES } from './NASAIg-types'\nimport { SetCopyLikesAction } from './NASAIg-types'\n\nexport function getAPODRange(startDate: Date, endDate: Date): ThunkAction<Promise<any>, {}, {}, AnyAction> {\n    return async (): Promise<any> => {\n        return fetch(`https://api.nasa.gov/planetary/apod?api_key=gNEZW89Uix8qJaVbIEzoUv8wa5gFsweJ2rinS7So&start_date=${startDate}&end_date=${endDate}`).then(\n            res => {\n                return Promise.resolve(res)\n            }\n        ).catch(err => {\n            return Promise.reject(new Error(err.response.data))\n        })\n    }\n}\n\n\nexport function getAPODDefault(): ThunkAction<Promise<any>, {}, {}, AnyAction> {\n    return async (): Promise<any> => {\n        return fetch(`https://api.nasa.gov/planetary/apod?api_key=gNEZW89Uix8qJaVbIEzoUv8wa5gFsweJ2rinS7So&count=100`).then(\n            res => {\n                return Promise.resolve(res.json())\n            }\n        ).catch(err => {\n            return Promise.reject(new Error(err.response.data))\n        })\n    }\n}\n\nexport function setCurrentImages (currentImages: any): SetCurrentImagesAction {\n    return {\n        type: SET_CURRENT_IMAGES,\n        currentImages\n    }\n}\n\nexport function setLoading (loading: boolean): SetLoadingAction {\n    return {\n        type: SET_LOADING,\n        loading\n    }\n}\n\nexport function setLikes (likes: number[]): SetLikesAction {\n    return {\n        type: SET_LIKES,\n        likes\n    }\n}\n\nexport function setCopyImages (copyImages: any): SetCopyImagesAction {\n    return {\n        type: SET_COPY_IMAGES,\n        copyImages\n    }\n}\n\nexport function setCopyLikes (copyLikes: number[]): SetCopyLikesAction {\n    return {\n        type: SET_COPY_LIKES,\n        copyLikes\n    }\n}\n\n","import React, { useState, useEffect } from 'react'\nimport { FormControl, InputLabel, Input, Button, List, ListItem, ListItemText, TextField, ListItemSecondaryAction, IconButton, ListItemIcon, Checkbox, Select, MenuItem, Grid, Card, CardContent } from '@material-ui/core'\nimport { KeyboardDatePicker, MuiPickersUtilsProvider } from '@material-ui/pickers'\nimport DateFnsUtils from '@date-io/date-fns'\nimport DeleteIcon from '@material-ui/icons/Delete'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { ThunkDispatch } from 'redux-thunk'\nimport { AnyAction } from 'redux'\nimport { RootState } from '../store/store'\nimport { setCurrentImages } from '../store/NASAIg-actions'\nimport { getAPODDefault } from '../store/NASAIg-actions'\nimport { SolarSystemLoading } from 'react-loadingg';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport { setLoading } from '../store/NASAIg-actions'\nimport { setLikes } from '../store/NASAIg-actions'\nimport { PURGE } from 'redux-persist'\nimport { MaterialUiPickersDate } from '@material-ui/pickers/typings/date'\nimport { setCopyImages } from '../store/NASAIg-actions'\nimport { SET_COPY_LIKES } from '../store/NASAIg-types'\nimport { setCopyLikes } from '../store/NASAIg-actions'\n\nexport default function NASAIg(this: any) {\n  const [selectedDate, setSelectedDate] = useState(new Date())\n  const forceUpdate = useForceUpdate()\n  const [selectedDateStart, setSelectedDateStart] = useState('01/01/2019')\n  const [selectedDateEnd, setSelectedDateEnd] = useState('01/01/2019')\n  const dispatch = useDispatch<ThunkDispatch<{}, {}, AnyAction>>()\n  const currentImages = useSelector((state: RootState) => state.NASAIg.currentImages)\n  const [buttonDisplay, setButtonDisplay] = useState(true)\n  const loading = useSelector((state: RootState) => state.NASAIg.loading)\n  const likes = useSelector((state: RootState) => state.NASAIg.likes)\n  const copyImages = useSelector((state: RootState) => state.NASAIg.copyImages)\n  const copyLikes = useSelector((state: RootState) => state.NASAIg.copyLikes)\n  function useForceUpdate(){\n    const [value, setValue] = useState(0); // integer state\n    return () => setValue(value => value + 1); // update the state to force render\n  }\n\n  const handleLike = (evt: React.MouseEvent, idx: number) => {\n    if (likes[idx] === 0) {\n      likes[idx] = 1\n      console.log(likes)\n      dispatch(setLikes(likes))\n    } else if (likes[idx] === 1) {\n      likes[idx] = 0\n      console.log(likes)\n      dispatch(setLikes(likes))\n    } else {\n      likes[idx] = 1\n      console.log(likes)\n      dispatch(setLikes(likes))\n    }\n    forceUpdate()\n  }\n\n  const filterImages = (evt: React.MouseEvent) => {\n    dispatch(setCopyImages(currentImages))\n    dispatch(setCopyLikes(likes))\n    const temp3 = currentImages.filter((element: any, idx: number) => {\n      const check = new Date(element.date)\n      const to = new Date(selectedDateEnd)\n      const from = new Date(selectedDateStart)\n      if((check.getTime() <= to.getTime() && check.getTime() >= from.getTime())) {\n        return true\n      } else {\n        const temp4 = likes.slice(0, idx)\n        temp4.concat(likes.slice(idx+1, likes.length))\n        dispatch(setLikes(temp4))\n        return false\n      }\n    })\n    dispatch(setCurrentImages(temp3))\n    console.log(likes)\n    forceUpdate()\n  }\n  const resetFilter = (evt: React.MouseEvent) => {\n    dispatch(setCurrentImages(copyImages))\n    dispatch(setLikes(copyLikes))\n    forceUpdate()\n  }\n\n  const purgeStore = (evt: React.MouseEvent) => { \n    evt.preventDefault();\n    dispatch({ \n        type: PURGE,\n        key: \"root\",    // Whatever you chose for the \"key\" value when initialising redux-persist in the **persistCombineReducers** method - e.g. \"root\"\n        result: () => null              // Func expected on the submitted action. \n    })  \n    dispatch(setLoading(true))  \n  }\n\n  useEffect(() => {\n    setButtonDisplay(false)\n    dispatch(setLoading(true))\n    dispatch(getAPODDefault()).then(res => {\n      dispatch(setLoading(false))\n      dispatch(setCurrentImages(res))\n      dispatch(setCopyImages(currentImages))\n      console.log(currentImages)\n      const temp = new Array<number>()\n      currentImages.forEach((element: any) => {\n        temp.push(0)\n      })\n      dispatch(setLikes(temp))\n      console.log(temp)\n      console.log(likes)\n      forceUpdate()\n    }).catch(err => {\n      console.log(err)\n    })\n  }, [])\n\n  return (\n    <div>\n      <h1>NASA Photo Feed</h1>\n      <Button variant=\"contained\" color=\"primary\" onClick={purgeStore}>New Images</Button>\n      {loading &&\n        <SolarSystemLoading size={\"large\"}/>\n      }\n      <React.Fragment>\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>\n        <KeyboardDatePicker\n          disableToolbar\n          style={{marginTop: \"-0.5%\", marginLeft: \"1%\", marginRight: \"1%\"}}\n          variant=\"inline\"\n          format=\"yyyy/dd/MM\"\n          margin=\"normal\"\n          id=\"date-picker-inline\"\n          label=\"Start Date\"\n          value={selectedDateStart}\n          onChange={(_, newValue) => setSelectedDateStart(newValue ? newValue : '2019/01/01')}\n          KeyboardButtonProps={{\n            'aria-label': 'change date',\n          }}\n        > Start Date</KeyboardDatePicker>\n      </MuiPickersUtilsProvider>\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\n      <KeyboardDatePicker\n        style={{marginTop: \"-0.5%\", marginLeft: \"1%\", marginRight: \"1%\"}}\n        disableToolbar\n        variant=\"inline\"\n        format=\"yyyy/dd/MM\"\n        margin=\"normal\"\n        id=\"date-picker-inline\"\n        label=\"End Date\"\n        value={selectedDateEnd}\n        onChange={(_, newValue) => setSelectedDateEnd(newValue ? newValue : '2019/01/01')}\n        KeyboardButtonProps={{\n          'aria-label': 'change date',\n        }}\n      > End Date</KeyboardDatePicker>\n    </MuiPickersUtilsProvider>\n    <Button variant=\"contained\" color=\"primary\" onClick={filterImages}>Filter By Date</Button>\n    <Button variant=\"contained\" color=\"primary\" onClick={resetFilter} style={{marginLeft: \"1%\"}}>Reset Filter</Button>\n    </React.Fragment>\n      <List style={{\n        position: 'absolute', left: '50%',\n        transform: 'translate(-50%, 0%)'\n      }}>\n        {currentImages.map((img, idx) => \n        <ListItem key={idx}> \n          <Card style={{width: \"50vw\", height: \"60vh\"}}>\n            <CardContent style={{\n        position: 'relative', left: '50%',\n        transform: 'translate(-50%, 0%)'\n      }}>\n          <IconButton onClick={(evt) => handleLike(evt, idx)}>\n                <FavoriteIcon/>\n                {likes[idx]}\n              </IconButton>\n              <ListItemText\n              primary={img.title}\n              secondary={img.date}  \n              />\n              <img src={img.url}></img>\n            </CardContent>\n          </Card>\n        </ListItem>\n        )}\n      </List>\n    </div>\n  )\n}  \n\n\n","import { IGState } from \"./NASAIg-types\";\nimport { NASAIgActionTypes } from \"./NASAIg-types\";\nimport { SET_CURRENT_IMAGES } from \"./NASAIg-types\";\nimport { getAPODDefault } from \"./NASAIg-actions\";\nimport { SET_LOADING } from \"./NASAIg-types\";\nimport { SET_LIKES } from \"./NASAIg-types\";\nimport { PURGE } from 'redux-persist';\nimport { initialState } from \"./store\";\nimport { SET_COPY_IMAGES } from \"./NASAIg-types\";\nimport { SET_COPY_LIKES } from \"./NASAIg-types\";\n\nexport const initialIGState: IGState = {\n    currentImages: [],\n    likes: [],\n    loading: false,\n    copyImages: [],\n    copyLikes: []\n}\n\nexport function NASAIgReducer (\n    state = initialIGState,\n    action: NASAIgActionTypes\n): IGState {\n    switch (action.type) {\n        case SET_CURRENT_IMAGES:\n            return {\n                ...state,\n                currentImages: action.currentImages\n            }\n        case SET_LIKES:\n            return {\n                ...state,\n                likes: action.likes\n            }\n        case SET_LOADING:\n            return {\n                ...state,\n                loading: action.loading\n            }\n        case SET_COPY_IMAGES:\n            return {\n                ...state,\n                copyImages: action.copyImages\n            }\n        case SET_COPY_LIKES:\n            return {\n                ...state,\n                copyLikes: action.copyLikes\n            }\n        case PURGE:\n            return initialIGState;\n        default:\n            return state\n    }\n}","import { initialIGState, NASAIgReducer } from \"./NASAIg-reducers\";\nimport { combineReducers, applyMiddleware, createStore, compose } from 'redux'\nimport { createStoreHook } from \"react-redux\";\nimport { persistStore, persistReducer } from 'redux-persist'\nimport createSagaMiddleware from \"../../node_modules/redux-saga\"\nimport storage from 'redux-persist/lib/storage'\nimport thunk from 'redux-thunk'\nimport { PersistPartial } from \"redux-persist/lib/persistReducer\";\n\nexport const initialState = {\n    NASAIg: initialIGState\n}\n\n\nexport type RootState = ReturnType<typeof rootReducer>\nconst middleware = createSagaMiddleware()\n\nconst rootReducer = combineReducers({\n    NASAIg: NASAIgReducer\n})\n\nconst config = {\n    key: 'root',\n    storage: storage,\n};\nconst persisted = persistReducer<RootState, any>(config, rootReducer);\nconst store = createStore(persisted, applyMiddleware(thunk, middleware));\n\nexport default store\n  \n\n\n// export default createStore(\n//     rootReducer,\n//     initialState,\n//     applyMiddleware(thunk, middleware)\n// )\n","import logo from './logo.svg';\nimport './App.css';\nimport React from 'react';\nimport NASAIg from './components/NASAIg';\nimport { Provider } from 'react-redux';\nimport store from './store/store';\nimport { getAPODDefault } from './store/NASAIg-actions';\nimport { setCurrentImages } from './store/NASAIg-actions';\nimport { PersistGate } from 'redux-persist/integration/react'\nimport { persistStore } from 'redux-persist';\nconst persistor = persistStore(store);\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <Provider store={store}>\n        <PersistGate loading={null} persistor={persistor}>\n          <NASAIg/>\n        </PersistGate>\n      </Provider>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}