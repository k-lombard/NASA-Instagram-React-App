{"version":3,"sources":["store/NASAIg-types.tsx","store/NASAIg-actions.tsx","components/NASAIg.tsx","store/NASAIg-reducers.tsx","store/store.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["SET_CURRENT_IMAGES","SET_LIKES","SET_LOADING","SET_COPY_IMAGES","SET_COPY_LIKES","SET_LIKE_DICT","setCurrentImages","currentImages","type","setLoading","loading","setLikes","likes","setCopyImages","copyImages","NASAIg","useState","Date","forceUpdate","setValue","value","useForceUpdate","selectedDateStart","setSelectedDateStart","selectedDateEnd","setSelectedDateEnd","dispatch","useDispatch","useSelector","state","setButtonDisplay","copyLikes","likeDict","useEffect","length","a","fetch","then","res","Promise","resolve","json","catch","err","reject","Error","response","data","temp","Array","temp2","Map","forEach","element","push","set","title","setLikeDict","console","log","Button","variant","color","onClick","evt","preventDefault","PURGE","key","result","size","Fragment","utils","DateFnsUtils","disableToolbar","style","marginTop","marginLeft","marginRight","format","margin","id","label","onChange","_","newValue","KeyboardButtonProps","setCopyLikes","temp1","temp3","filter","idx","check","date","to","from","getTime","slice","concat","List","position","left","transform","map","img","ListItem","Card","width","height","CardContent","IconButton","handleLike","ListItemText","primary","secondary","src","url","initialIGState","middleware","createSagaMiddleware","rootReducer","combineReducers","action","config","storage","persisted","persistReducer","store","createStore","applyMiddleware","thunk","persistor","persistStore","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.43aa7dfd.chunk.js","sourcesContent":["import { PURGE } from 'redux-persist'\nexport interface IGState {\n    currentImages: any[];\n    likes: number[];\n    loading: boolean;\n    copyImages: any[];\n    copyLikes: number[];\n    likeDict: any;\n}\n\nexport const SET_CURRENT_IMAGES = 'SET_CURRENT_IMAGES'\nexport const SET_LIKES = 'SET_LIKES'\nexport const SET_LOADING = 'SET_LOADING'\nexport const SET_COPY_IMAGES = 'SET_COPY_IMAGES'\nexport const SET_COPY_LIKES = 'SET_COPY_LIKES'\nexport const SET_LIKE_DICT = 'LIKE_DICT'\n\nexport interface SetCurrentImagesAction {\n    type: typeof SET_CURRENT_IMAGES;\n    currentImages: any[];\n}\n\nexport interface SetLikesAction {\n    type: typeof SET_LIKES;\n    likes: number[];\n}\n\nexport interface SetLoadingAction {\n    type: typeof SET_LOADING;\n    loading: boolean;\n}\nexport interface PurgeAction {\n    type: typeof PURGE;\n    IGState: {};\n}\n\nexport interface SetCopyImagesAction {\n    type: typeof SET_COPY_IMAGES;\n    copyImages: any[];\n}\n\nexport interface SetCopyLikesAction {\n    type: typeof SET_COPY_LIKES;\n    copyLikes: number[];\n}\n\nexport interface SetLikeDictAction {\n    type: typeof SET_LIKE_DICT;\n    likeDict: any;\n}\n\n\nexport type NASAIgActionTypes = SetCurrentImagesAction | SetLikesAction | \nSetLoadingAction | PurgeAction | SetCopyImagesAction | SetCopyLikesAction\n| SetLikeDictAction","import { ThunkAction } from 'redux-thunk'\nimport { AnyAction } from 'redux'\nimport { SET_CURRENT_IMAGES } from './NASAIg-types'\nimport { SetCurrentImagesAction } from './NASAIg-types'\nimport { SET_LOADING} from './NASAIg-types'\nimport { SET_LIKES } from './NASAIg-types'\nimport { SetLikesAction } from './NASAIg-types'\nimport { SetLoadingAction } from './NASAIg-types'\nimport { persistStore } from 'redux-persist'\nimport store from './store'\nimport { SetCopyImagesAction } from './NASAIg-types'\nimport { SET_COPY_IMAGES } from './NASAIg-types'\nimport { SET_COPY_LIKES } from './NASAIg-types'\nimport { SetCopyLikesAction } from './NASAIg-types'\nimport { SetLikeDictAction } from './NASAIg-types'\nimport { SET_LIKE_DICT } from './NASAIg-types'\n\nexport function getAPODRange(startDate: Date, endDate: Date): ThunkAction<Promise<any>, {}, {}, AnyAction> {\n    return async (): Promise<any> => {\n        return fetch(`https://api.nasa.gov/planetary/apod?api_key=gNEZW89Uix8qJaVbIEzoUv8wa5gFsweJ2rinS7So&start_date=${startDate}&end_date=${endDate}`).then(\n            res => {\n                return Promise.resolve(res)\n            }\n        ).catch(err => {\n            return Promise.reject(new Error(err.response.data))\n        })\n    }\n}\n\n\nexport function getAPODDefault(): ThunkAction<Promise<any>, {}, {}, AnyAction> {\n    return async (): Promise<any> => {\n        return fetch(`https://api.nasa.gov/planetary/apod?api_key=gNEZW89Uix8qJaVbIEzoUv8wa5gFsweJ2rinS7So&count=100`).then(\n            res => {\n                return Promise.resolve(res.json())\n            }\n        ).catch(err => {\n            return Promise.reject(new Error(err.response.data))\n        })\n    }\n}\n\nexport function setCurrentImages (currentImages: any): SetCurrentImagesAction {\n    return {\n        type: SET_CURRENT_IMAGES,\n        currentImages\n    }\n}\n\nexport function setLoading (loading: boolean): SetLoadingAction {\n    return {\n        type: SET_LOADING,\n        loading\n    }\n}\n\nexport function setLikes (likes: number[]): SetLikesAction {\n    return {\n        type: SET_LIKES,\n        likes\n    }\n}\n\nexport function setCopyImages (copyImages: any): SetCopyImagesAction {\n    return {\n        type: SET_COPY_IMAGES,\n        copyImages\n    }\n}\n\nexport function setCopyLikes (copyLikes: number[]): SetCopyLikesAction {\n    return {\n        type: SET_COPY_LIKES,\n        copyLikes\n    }\n}\n\nexport function setLikeDict (likeDict: any): SetLikeDictAction {\n    return {\n        type: SET_LIKE_DICT,\n        likeDict\n    }\n}\n\n","import React, { useState, useEffect } from 'react'\nimport { FormControl, InputLabel, Input, Button, List, ListItem, ListItemText, TextField, ListItemSecondaryAction, IconButton, ListItemIcon, Checkbox, Select, MenuItem, Grid, Card, CardContent } from '@material-ui/core'\nimport { KeyboardDatePicker, MuiPickersUtilsProvider } from '@material-ui/pickers'\nimport DateFnsUtils from '@date-io/date-fns'\nimport DeleteIcon from '@material-ui/icons/Delete'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { ThunkDispatch } from 'redux-thunk'\nimport { AnyAction } from 'redux'\nimport { RootState } from '../store/store'\nimport { setCurrentImages } from '../store/NASAIg-actions'\nimport { getAPODDefault } from '../store/NASAIg-actions'\nimport { SolarSystemLoading } from 'react-loadingg';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport { setLoading } from '../store/NASAIg-actions'\nimport { setLikes } from '../store/NASAIg-actions'\nimport { PURGE } from 'redux-persist'\nimport { MaterialUiPickersDate } from '@material-ui/pickers/typings/date'\nimport { setCopyImages } from '../store/NASAIg-actions'\nimport { SET_COPY_LIKES } from '../store/NASAIg-types'\nimport { setCopyLikes } from '../store/NASAIg-actions'\nimport { setLikeDict } from '../store/NASAIg-actions'\n\nexport default function NASAIg(this: any) {\n  const [selectedDate, setSelectedDate] = useState(new Date())\n  const forceUpdate = useForceUpdate()\n  const [selectedDateStart, setSelectedDateStart] = useState('01/01/2019')\n  const [selectedDateEnd, setSelectedDateEnd] = useState('01/01/2019')\n  const dispatch = useDispatch<ThunkDispatch<{}, {}, AnyAction>>()\n  const currentImages = useSelector((state: RootState) => state.NASAIg.currentImages)\n  const [buttonDisplay, setButtonDisplay] = useState(true)\n  const loading = useSelector((state: RootState) => state.NASAIg.loading)\n  const likes = useSelector((state: RootState) => state.NASAIg.likes)\n  const copyImages = useSelector((state: RootState) => state.NASAIg.copyImages)\n  const copyLikes = useSelector((state: RootState) => state.NASAIg.copyLikes)\n  const likeDict = useSelector((state: RootState) => state.NASAIg.likeDict)\n  function useForceUpdate(){\n    const [value, setValue] = useState(0); // integer state\n    return () => setValue(value => value + 1); // update the state to force render\n  }\n\n  const handleLike = (evt: React.MouseEvent, idx: number, title: String) => {\n    if (likes[idx] === 0) {\n      likes[idx] = 1\n      dispatch(setLikes(likes))\n    } else if (likes[idx] === 1) {\n      likes[idx] = 0\n      dispatch(setLikes(likes))\n    } else {\n      likes[idx] = 1\n      dispatch(setLikes(likes))\n    }\n    forceUpdate()\n  }\n\n  const filterImages = (evt: React.MouseEvent) => {\n    dispatch(setCopyImages(currentImages))\n    dispatch(setCopyLikes(likes))\n    let temp1 = likes\n    const temp3 = currentImages.filter((element: any, idx: number) => {\n      const check = new Date(element.date)\n      const to = new Date(selectedDateEnd)\n      const from = new Date(selectedDateStart)\n      if((check.getTime() <= to.getTime() && check.getTime() >= from.getTime())) {\n        return true\n      } else {\n        temp1 = temp1.slice(0,idx).concat(temp1.slice(idx+1,temp1.length))\n        return false\n      }\n    })\n    dispatch(setLikes(temp1))\n    dispatch(setCurrentImages(temp3))\n    forceUpdate()\n  }\n  const resetFilter = (evt: React.MouseEvent) => {\n    dispatch(setCurrentImages(copyImages))\n    dispatch(setLikes(copyLikes))\n    forceUpdate()\n  }\n\n  const purgeStore = (evt: React.MouseEvent) => { \n    evt.preventDefault();\n    dispatch({ \n        type: PURGE,\n        key: \"root\",    // Whatever you chose for the \"key\" value when initialising redux-persist in the **persistCombineReducers** method - e.g. \"root\"\n        result: () => null              // Func expected on the submitted action. \n    })  \n    dispatch(setLoading(true))  \n  }\n\n  useEffect(() => {\n    if (currentImages.length === 0) {\n      setButtonDisplay(false)\n      dispatch(setLoading(true))\n      dispatch(getAPODDefault()).then(res => {\n        dispatch(setLoading(false))\n        dispatch(setCurrentImages(res))\n        dispatch(setCopyImages(currentImages))\n        const temp = new Array<number>()\n        const temp2 = new Map<String, number>()\n        currentImages.forEach((element: any) => {\n          temp.push(0)\n          temp2.set(element.title, 0)\n        })\n        dispatch(setLikes(temp))\n        dispatch(setLikeDict(temp2))\n        forceUpdate()\n      }).catch(err => {\n        console.log(err)\n      })\n    }\n  }, [])\n\n  return (\n    <div>\n      <h1>NASA Photo Feed</h1>\n      <Button variant=\"contained\" color=\"primary\" onClick={purgeStore}>New Images</Button>\n      {loading &&\n        <SolarSystemLoading size={\"large\"}/>\n      }\n      <React.Fragment>\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>\n        <KeyboardDatePicker\n          disableToolbar\n          style={{marginTop: \"-0.5%\", marginLeft: \"1%\", marginRight: \"1%\"}}\n          variant=\"inline\"\n          format=\"yyyy/dd/MM\"\n          margin=\"normal\"\n          id=\"date-picker-inline\"\n          label=\"Start Date\"\n          value={selectedDateStart}\n          onChange={(_, newValue) => setSelectedDateStart(newValue ? newValue : '2019/01/01')}\n          KeyboardButtonProps={{\n            'aria-label': 'change date',\n          }}\n        > Start Date</KeyboardDatePicker>\n      </MuiPickersUtilsProvider>\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\n      <KeyboardDatePicker\n        style={{marginTop: \"-0.5%\", marginLeft: \"1%\", marginRight: \"1%\"}}\n        disableToolbar\n        variant=\"inline\"\n        format=\"yyyy/dd/MM\"\n        margin=\"normal\"\n        id=\"date-picker-inline\"\n        label=\"End Date\"\n        value={selectedDateEnd}\n        onChange={(_, newValue) => setSelectedDateEnd(newValue ? newValue : '2019/01/01')}\n        KeyboardButtonProps={{\n          'aria-label': 'change date',\n        }}\n      > End Date</KeyboardDatePicker>\n    </MuiPickersUtilsProvider>\n    <Button variant=\"contained\" color=\"primary\" onClick={filterImages}>Filter By Date</Button>\n    <Button variant=\"contained\" color=\"primary\" onClick={resetFilter} style={{marginLeft: \"1%\"}}>Reset Filter</Button>\n    </React.Fragment>\n      <List style={{\n        position: 'absolute', left: '50%',\n        transform: 'translate(-50%, 0%)'\n      }}>\n        {currentImages.map((img, idx) => \n        <ListItem key={idx}> \n          <Card style={{width: \"50vw\", height: \"60vh\"}}>\n            <CardContent style={{\n        position: 'relative', left: '50%',\n        transform: 'translate(-50%, 0%)'\n      }}>\n          <IconButton onClick={(evt) => handleLike(evt, idx, img.title)}>\n                <FavoriteIcon/>\n                {likes[idx]}\n              </IconButton>\n              <ListItemText\n              primary={img.title}\n              secondary={img.date}  \n              />\n              <img src={img.url}></img>\n            </CardContent>\n          </Card>\n        </ListItem>\n        )}\n      </List>\n    </div>\n  )\n}  \n\n\n","import { IGState } from \"./NASAIg-types\";\nimport { NASAIgActionTypes } from \"./NASAIg-types\";\nimport { SET_CURRENT_IMAGES } from \"./NASAIg-types\";\nimport { getAPODDefault } from \"./NASAIg-actions\";\nimport { SET_LOADING } from \"./NASAIg-types\";\nimport { SET_LIKES } from \"./NASAIg-types\";\nimport { PURGE } from 'redux-persist';\nimport { initialState } from \"./store\";\nimport { SET_COPY_IMAGES } from \"./NASAIg-types\";\nimport { SET_COPY_LIKES } from \"./NASAIg-types\";\nimport { SET_LIKE_DICT } from \"./NASAIg-types\";\n\nexport const initialIGState: IGState = {\n    currentImages: [],\n    likes: [],\n    loading: false,\n    copyImages: [],\n    copyLikes: [],\n    likeDict: new Map<String, number>()\n}\n\nexport function NASAIgReducer (\n    state = initialIGState,\n    action: NASAIgActionTypes\n): IGState {\n    switch (action.type) {\n        case SET_CURRENT_IMAGES:\n            return {\n                ...state,\n                currentImages: action.currentImages\n            }\n        case SET_LIKES:\n            return {\n                ...state,\n                likes: action.likes\n            }\n        case SET_LOADING:\n            return {\n                ...state,\n                loading: action.loading\n            }\n        case SET_COPY_IMAGES:\n            return {\n                ...state,\n                copyImages: action.copyImages\n            }\n        case SET_COPY_LIKES:\n            return {\n                ...state,\n                copyLikes: action.copyLikes\n            }\n        case SET_LIKE_DICT:\n            return {\n                ...state,\n                likeDict: action.likeDict\n            }\n        case PURGE:\n            return initialIGState;\n        default:\n            return state\n    }\n}","import { initialIGState, NASAIgReducer } from \"./NASAIg-reducers\";\nimport { combineReducers, applyMiddleware, createStore, compose } from 'redux'\nimport { createStoreHook } from \"react-redux\";\nimport { persistStore, persistReducer } from 'redux-persist'\nimport createSagaMiddleware from \"../../node_modules/redux-saga\"\nimport storage from 'redux-persist/lib/storage'\nimport thunk from 'redux-thunk'\nimport { PersistPartial } from \"redux-persist/lib/persistReducer\";\n\nexport const initialState = {\n    NASAIg: initialIGState\n}\n\n\nexport type RootState = ReturnType<typeof rootReducer>\nconst middleware = createSagaMiddleware()\n\nconst rootReducer = combineReducers({\n    NASAIg: NASAIgReducer\n})\n\nconst config = {\n    key: 'root',\n    storage: storage,\n};\nconst persisted = persistReducer<RootState, any>(config, rootReducer);\nconst store = createStore(persisted, applyMiddleware(thunk, middleware));\n\nexport default store\n  \n\n\n// export default createStore(\n//     rootReducer,\n//     initialState,\n//     applyMiddleware(thunk, middleware)\n// )\n","import logo from './logo.svg';\nimport './App.css';\nimport React from 'react';\nimport NASAIg from './components/NASAIg';\nimport { Provider } from 'react-redux';\nimport store from './store/store';\nimport { getAPODDefault } from './store/NASAIg-actions';\nimport { setCurrentImages } from './store/NASAIg-actions';\nimport { PersistGate } from 'redux-persist/integration/react'\nimport { persistStore } from 'redux-persist';\nconst persistor = persistStore(store);\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <Provider store={store}>\n        <PersistGate loading={null} persistor={persistor}>\n          <NASAIg/>\n        </PersistGate>\n      </Provider>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\nreportWebVitals();"],"sourceRoot":""}